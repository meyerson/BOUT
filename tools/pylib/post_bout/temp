import post_bout as pb
meta

from post_bout import pb_corral
import post_bout as pb
from pb_present import LinResPresent
a = pb.corral(refresh=False,skew=True,IConly=0,debug=False,logname='status_2dfast.log')
y = LinResPresent(a.db)
y.show(debug=False,pdfname='output_haswak+lownu.pdf')


import post_bout as pb
meta = pb.metadata(path='./')
old,new = pb.save(path='./',transform=True,debug=False)

import post_bout as pb
pb.save(path='./',transform=True,debug=True)

import post_bout as pb
pb.save(path='./', transform=True)r


import post_bout as pb
pb.save(path='./')

import post_bout as pb
meta = pb.metadata(path='./')
gradNi0 = pb.boutdata.collect('gradNi0')
Ni0 = pb.boutdata.collect('Ni0')
Ni_x = pb.boutdata.collect('Ni_x')
L = meta['L']
Rxy = meta['Rxy']
DXRxy =  pb.boutdata.collect('DXRxy')
print DXRxy * gradNi0**-1


from boututils import showdata
showdata(ni[:,2,:,:],movie=True)
z = np.array(np.gradient(ni))[0]
showdata(z[:,2,:,:])


import post_bout as pb
meta = pb.metadata(path='./')
ni = pb.boutdata.collect('Ni')
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.backends.backend_pdf import PdfPages
meta = pb.metadata(path='./')
pp = PdfPages('rotate.pdf')
fig = plt.figure()
img00 = fig.add_subplot(1,1,1)
img00.contourf(ni[0,2,:,:],interpolation='bilinear', cmap=None)
fig.savefig(pp, format='pdf')
plt.close(fig)
old,new = pb.save(path='./',transform=True,debug=True)
fig = plt.figure()
img00 = fig.add_subplot(1,1,1)
img00.contourf(old[0,2,:,:],interpolation='bilinear', cmap=None)
fig.savefig(pp, format='pdf')
plt.close(fig)
fig = plt.figure()
img00 = fig.add_subplot(1,1,1)
img00.contourf(new[0,2,:,:],interpolation='bilinear', cmap=None)
fig.savefig(pp, format='pdf')
plt.close(fig)
pp.close()

z = pb.rotate(ni[0:10,:,:,:],meta,view=True)


#test the old spectral method on new data
ICmodes =[[1,1],[1,2],[1,3],[1,4],[1,5]]
import post_bout as pb
meta = pb.metadata(path='./')
ni = pb.boutdata.collect('Ni')
z = pb.rotate(ni,meta,view=False) #make this more flexibable
modes_db,ave = basic_info(z,meta,user_peak = ICmodes) 
	   
modes_db,ave = basic_info(data_r[active],meta,
                                      user_peak = ICmodes)
	

#for testing the original rotate routine
from boutdata import collect
import post_bout as pb
from read_inp import metadata
path = '/tmp/2fluid/data_bz_11_1e-1'
ni = collect('Ni',path=path)
meta = pb.metadata(path=path)
from rotate import rotate
z = rotate(ni,meta,debug=True)

#let's test fft of the rotated images
from boutdata import collect
import post_bout as pb
from read_inp import metadata
path = './'
ni = collect('Ni',path=path)
meta = pb.metadata(path=path)
from rotate_mp import rotate_mp
from rotate2 import rotate
z = rotate(ni,meta,debug=False,cached=Falses,view=True)



import post_bout
a = post_bout.corral(cached=True)
a.show2()

b = post_bout.LinRes(data=a)
b.modes()
dir(b)

import post_bout
from replab_lineplot import LineLegendExample 
from reportlab.platypus import *
a = LineLegendExample()
doc = SimpleDocTemplate('new.pdf')
doc.build([a])



a = post_bout.corral(cached=True)
a.show2()


import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.backends.backend_pdf import PdfPages
import post_bout as pb
meta = pb.metadata(path='./')
old,new = pb.save(path='./',transform=True,debug=True)
pp = PdfPages('rotate.pdf')
fig = plt.figure()
img00 = fig.add_subplot(1,1,1)
img00.contourf(old[0,2,:,:],interpolation='bilinear', cmap=None)
fig.savefig(pp, format='pdf')
plt.close(fig)
fig = plt.figure()
img00 = fig.add_subplot(1,1,1)
img00.contourf(new[0,2,:,:],interpolation='bilinear', cmap=None)
fig.savefig(pp, format='pdf')
plt.close(fig)
fig.savefig(pp, format='pdf') 
pp.close()


import sys
import pickle
import os
import json
    

boutpath = os.environ['BOUT_TOP']
pylibpath = boutpath+'/tools/pylib'
pbpath = pylibpath+'/post_bout'
boutdatapath = pylibpath+'/boutdata'
boututilpath = pylibpath+'/boututils'
    
allpath = [boutpath,pylibpath,pbpath,boutdatapath,boututilpath]
    # sys.path.append('/home/cryosphere/BOUT/tools/pylib')
    # sys.path.append('/home/cryosphere/BOUT/tools/pylib/boutdata')
    # sys.path.append('/home/cryosphere/BOUT/tools/pylib/boututils')
    # sys.path.append('/home/cryosphere/BOUT/tools/pylib/post_bout')
    #sys.path.append(allpath)
[sys.path.append(elem) for elem in allpath]
print sys.path


#to debug some plotomega stuff
from pb_draw import LinResDraw,subset
from pb_corral import LinRes
import numpy as np
import matplotlib.pyplot as plt

import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.artist as artist 
import matplotlib.ticker as ticker
#from matplotlib.ticker import FuncFormatter
#from matplotlib.ticker import ScalarFormatter 

from reportlab.platypus import *
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.rl_config import defaultPageSize
from reportlab.lib.units import inch
from reportlab.graphics.charts.linecharts import HorizontalLineChart
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.lineplots import LinePlot
from reportlab.graphics.widgets.markers import makeMarker
from reportlab.lib import colors

from replab_x_vs_y import RL_Plot

pp = PdfPages('debug.pdf')
fig1 = plt.figure()
s.plotfreq2(pp_bug,xscale='log',yscale='symlog',overplot=True)
ss.plotgamma(pp_bug,xscale='log',yscale='symlog',overplot=True)
ss.plottheory(pp_bug)
ss.plottheory(pp_bug,comp='freq')
fig1.savefig(pp_bug, format='pdf')   
pp_bug.close()
pp.close()

from post_bout import subset
self = a
field='Ni'
s = subset(self.db,'field',[field])
modelist = []
m=1
[modelist.append([m,n+1]) for n in range(7)]
s = subset(s.db,'mn',modelist)
allk = s.k[:,1,s.nx/2]
ki = np.argsort(allk)
y1 = np.array(a.models[1].omegamax).flatten()
y0 = np.array(a.models[0].omegamax).flatten()


pp = PdfPages('debug.pdf')
fig1 = plt.figure()
canvas = fig1.add_subplot(1,1,1) 


#make a movie
